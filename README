OVERVIEW:

The feature goal for ThoughtStream part 2 was to implement oAuth2 using google cloud services for users of the web application. 
This is to ensure user security and allows only authorized and logged-in users to make/update their own diary entries. Session based
authentication was implemented for this current version of the project because of how well it interfaces with the backend of the application, especially for testing as the connect.sid cookie value was used in api GET and POST requests. In part 3 of the project, 
JWT-based authentication will be used instead given how it interfaces with React. 
The new packages used in part 2 from npm are 
passport: Needed for request authentication and to interface with google.  
passport-google-oauth2: Specifically using google services for oAuth2, processing google callback url, secret, and client id 
express-session: Needed to maintain user access via authentciation through handling cookie value (connect.sid)
cookie-parser: Needed to process/parse cookies from users
The middleware used in part 2 are
ensureAuthenticated(): Used to handle authentication status for users for later processing (continue client request or deny it)
session(): Used to handle and store current user id while authenticated, user data is then available for handling
cookieParser(): Needed to parse cookies (connect.sid for a given session) between requests
express.json: Needed to handle/parse inputted JSON files (diary entries)

GOOGLE CLOUD CONSOLE WORKFLOW:

First go to google cloud console and initialize a project, afterwards go to the credentials sections of the APIs tab to create a client id 
with type "Web application", provided local running server location and port the redirect URI, the finally include the client id and 
secret in the .env file for future usage. Then in add relavent google cloud console information to Usage.js, passport.js, and authRoutes.js.

oAuth2 provides authentication for a given user for third-party applications. Providers like Google handle these authorizations by processing a user's existing account. 

AUTHENTICATION FLOW DESCRIPTION

When the user clicks the link to login to ThoughtStream, authroutes.js sends an authentication form by Google for the user to login to using their existing Google profile information. Once inputted, the authorization screen will process the inputted information, a callback link is sent where authroutes.js further handles it by providing a login status, and handling existing or creating user entries. A sessions cookie is generated that contains 


ENVIORNMENT VARIABLES

MONGO_URI
WEATHER_KEY
GOOGLE_CLIENT_ID
GOOGLE_CLIENT_SECRET
GOOGLE_CALLBACK_URL
SESSION_SECRET
PORT

MONGOOSE MODEL AND SCHEMA CHANGES

DiaryEntry.js: Defines the structure for a valid diary entry given by a user
User.js: Data is stored about the user after authentication, this data "entry" is generated after user login (successful)

Given the provided framework from mongoose, within DiaryEntry, the User field is set to contain a unique ID of a given user. This id is passed around as reference (using "ref") in User.js. 

ROUTE PROTECTION

Route protection is enforced via ensureAuthenticated() which is a middleware that maintains/processes the authentication status for a given user, allowing them (or denying) access to continued client request. For the defined routes in diaryRoutes.js, ensureAuthenticated() is called as one of the arguments for the route function calls, the functions will continue if authentication is continued/sucessful via ensureAuthentication(). 